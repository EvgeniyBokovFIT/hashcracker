version: "3.5"
services:
  manager:
    container_name: manager
    build:
      context: ./manager
      dockerfile: Dockerfile
    hostname: manager
    ports:
      - "8000:8000"
    networks:
      - crack-hash-network
  worker0:
    container_name: worker0
    build:
      context: ./worker
      dockerfile: Dockerfile
    hostname: worker0
    ports:
      - "8080:8080"
    networks:
      - crack-hash-network
  worker1:
    container_name: worker1
    build:
      context: ./worker
      dockerfile: Dockerfile
    hostname: worker1
    ports:
      - "8081:8080"
    networks:
      - crack-hash-network
  worker2:
    container_name: worker2
    build:
      context: ./worker
      dockerfile: Dockerfile
    hostname: worker2
    ports:
      - "8082:8080"
    networks:
      - crack-hash-network
  worker3:
    container_name: worker3
    build:
      context: ./worker
      dockerfile: Dockerfile
    hostname: worker3
    ports:
      - "8083:8080"
    networks:
      - crack-hash-network
  mongodb1:
      image: mongo:4
      restart: always
      container_name: mongodb1
      networks:
        - crack-hash-network
      volumes:
        - mongodata1:/data/db
      expose:
        - "27017"
      entrypoint: [ "/usr/bin/mongod", "--replSet", "rsmongo", "--bind_ip_all", "--wiredTigerCacheSizeGB", "1"]

  mongodb2:
      image: mongo:4
      restart: always
      container_name: mongodb2
      networks:
        - crack-hash-network
      volumes:
        - mongodata2:/data/db
      expose:
        - "27017"
      entrypoint: [ "/usr/bin/mongod", "--replSet", "rsmongo", "--bind_ip_all", "--wiredTigerCacheSizeGB", "1"]

  mongodb3:
      image: mongo:4
      restart: always
      container_name: mongodb3
      networks:
        - crack-hash-network
      volumes:
        - mongodata3:/data/db
      expose:
        - "27017"
      entrypoint: [ "/usr/bin/mongod", "--replSet", "rsmongo", "--bind_ip_all", "--wiredTigerCacheSizeGB", "1" ]

  mongosetup:
      image: "mongo-setup"
      build: "./mongo-setup"
      container_name: "mongosetup"
      networks:
        - crack-hash-network
      depends_on:
        - mongodb1
      volumes:
        - mongostatus:/data/
  rabbitmq3:
    container_name: "rabbitmq"
    image: rabbitmq:3.8-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - crack-hash-network
    ports:
      # AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'

volumes:
  mongodata1:
  mongodata2:
  mongodata3:
  mongostatus:

networks:
  crack-hash-network:
    driver: bridge
